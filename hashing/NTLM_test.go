package hashing

import (
	"bytes"
	"testing"
)

func TestGenerateNTLMv2ChallengeProof(t *testing.T) {

	//Timestamp 80ce5e54ca4ed901

	var bytebuffer = [][]byte{
		//responseServerVersion
		[]byte{0x01},

		//hiresponseServerVersion
		[]byte{0x01},

		//Z6
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},

		//TIMESTAMP
		[]byte{0x00, 0x98, 0x5b, 0x1c, 0x6b, 0x4f, 0xd9, 0x01},

		//Client challenge 71386c7a71335532
		//TODO, What the hell generates this?
		[]byte{0x46, 0x4e, 0x73, 0x72, 0x32, 0x33, 0x78, 0x45},

		//Z4
		[]byte{0x00, 0x00, 0x00, 0x00},

		//Server Name
		// This is the entire output of the TARGET INFO field
		[]byte{0x01, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x03, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x02, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x04, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x98, 0x5b, 0x1c, 0x6b, 0x4f, 0xd9, 0x01, 0x09, 0x00, 0x1a, 0x00, 0x63, 0x00, 0x69, 0x00, 0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00},

		//Z4
		[]byte{0x00, 0x00, 0x00, 0x00},
	}

	SchallTemp := []byte{0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x5b, 0x1c, 0x6b, 0x4f, 0xd9, 0x01, 0x46, 0x4e, 0x73, 0x72, 0x32, 0x33, 0x78, 0x45, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x03, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x02, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x04, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x98, 0x5b, 0x1c, 0x6b, 0x4f, 0xd9, 0x01, 0x09, 0x00, 0x1a, 0x00, 0x63, 0x00, 0x69, 0x00, 0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	NTLMChallenge := []byte{0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa}

	var SecurityBlob []byte
	for _, v := range bytebuffer {
		SecurityBlob = append(SecurityBlob, v...)
	}
	ttt := append(NTLMChallenge, SecurityBlob...)

	if !bytes.Equal(SchallTemp, ttt) {
		t.Fatalf("Security Blob(%d) and Actual(%d) dont match\nExpected\n%#v\nactual:\n%#v", len(SchallTemp), len(ttt), SchallTemp, ttt)
	}

	//cifs/KeWsxiRd
	//TargetName := []byte{0x63, 0x00, 0x69, 0x00, 0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x4b, 0x00, 0x65, 0x00, 0x57, 0x00, 0x73, 0x00, 0x78, 0x00, 0x69, 0x00, 0x52, 0x00, 0x64, 0x00}

	//DOMAIN LIGHT.LOCAL
	//Might also be the target
	Domain := "light.local"
	username := "ilightthings"

	passwordhash := ToNTHash("password")

	//light.local/ilightthings:password
	ExpectedProofString := []byte{0xc1, 0x21, 0xdd, 0x0a, 0xcb, 0xff, 0x24, 0x28, 0xcc, 0x0c, 0xe9, 0x7a, 0x23, 0x4f, 0x54, 0x68}

	proof, err := GenerateNTLMv2ChallengeProof(NTLMChallenge, "", passwordhash, username, Domain, SecurityBlob)
	if err != nil {
		t.Error(err)
	}
	if !bytes.Equal(ExpectedProofString, proof) {
		t.Errorf("proof dont match\nExpected\n%+v\ngot:\n%+v", ExpectedProofString, proof)

	}

	// 8d27c753d9b37df328ce0de32d333ecb010100000000000080ce5e54ca4ed90171386c7a7133553200000000010010004b006500570073007800690052006400030010004b006500570073007800690052006400020010007a006b00620066007700790051005200040010007a006b006200660077007900510052000700080080ce5e54ca4ed90109001a0063006900660073002f004b0065005700730078006900520064000000000000000000
	//Responce := []byte{0x8d, 0x27, 0xc7, 0x53, 0xd9, 0xb3, 0x7d, 0xf3, 0x28, 0xce, 0x0d, 0xe3, 0x2d, 0x33, 0x3e, 0xcb, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xce, 0x5e, 0x54, 0xca, 0x4e, 0xd9, 0x01, 0x71, 0x38, 0x6c, 0x7a, 0x71, 0x33, 0x55, 0x32, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x4b, 0x00, 0x65, 0x00, 0x57, 0x00, 0x73, 0x00, 0x78, 0x00, 0x69, 0x00, 0x52, 0x00, 0x64, 0x00, 0x03, 0x00, 0x10, 0x00, 0x4b, 0x00, 0x65, 0x00, 0x57, 0x00, 0x73, 0x00, 0x78, 0x00, 0x69, 0x00, 0x52, 0x00, 0x64, 0x00, 0x02, 0x00, 0x10, 0x00, 0x7a, 0x00, 0x6b, 0x00, 0x62, 0x00, 0x66, 0x00, 0x77, 0x00, 0x79, 0x00, 0x51, 0x00, 0x52, 0x00, 0x04, 0x00, 0x10, 0x00, 0x7a, 0x00, 0x6b, 0x00, 0x62, 0x00, 0x66, 0x00, 0x77, 0x00, 0x79, 0x00, 0x51, 0x00, 0x52, 0x00, 0x07, 0x00, 0x08, 0x00, 0x80, 0xce, 0x5e, 0x54, 0xca, 0x4e, 0xd9, 0x01, 0x09, 0x00, 0x1a, 0x00, 0x63, 0x00, 0x69, 0x00, 0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x4b, 0x00, 0x65, 0x00, 0x57, 0x00, 0x73, 0x00, 0x78, 0x00, 0x69, 0x00, 0x52, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

}

/*

[*] Incoming connection (192.168.1.197,57846)
[*] AUTHENTICATE_MESSAGE (light.local\ilightthings,)
[*] User \ilightthings authenticated successfully
[*] ilightthings::light.local:aaaaaaaaaaaaaaaa:8d27c753d9b37df328ce0de32d333ecb:010100000000000080ce5e54ca4ed90171386c7a7133553200000000010010004b006500570073007800690052006400030010004b006500570073007800690052006400020010007a006b00620066007700790051005200040010007a006b006200660077007900510052000700080080ce5e54ca4ed90109001a0063006900660073002f004b0065005700730078006900520064000000000000000000
[*] Closing down connection (192.168.1.197,57846)

username::domain:challengestring:Proofstring:ChallengeParamteres


*/

func Test_genHMACMD5(t *testing.T) {
	stringToHash := "password"

	//https://gchq.github.io/CyberChef/#recipe=NT_Hash()From_Hex('Auto')To_Hex('0x%20with%20comma',0/breakpoint)&input=cGFzc3N3b3JkMTIz
	//NT hash for password123
	hashKey := []byte{0x72, 0x7e, 0xf0, 0xd8, 0x08, 0x9e, 0xb6, 0x55, 0xbd, 0xe2, 0xba, 0x4d, 0x04, 0x99, 0xe4, 0xf9}

	//https://gchq.github.io/CyberChef/#recipe=HMAC(%7B'option':'Hex','string':'727EF0D8089EB655BDE2BA4D0499E4F9'%7D,'MD5')From_Hex('Auto')To_Hex('0x%20with%20comma',0)&input=cGFzc3dvcmQ
	//536f5188de82d1ebafaa1db372dcf564
	expectedOut := []byte{0x53, 0x6f, 0x51, 0x88, 0xde, 0x82, 0xd1, 0xeb, 0xaf, 0xaa, 0x1d, 0xb3, 0x72, 0xdc, 0xf5, 0x64}

	actualOut, err := genHMACMD5(hashKey, []byte(stringToHash))
	if err != nil {
		t.Error(err)
	}

	if !bytes.Equal(expectedOut, actualOut) {
		t.Errorf("unexpected result.\nShould be:\n%+v\nActually\n%+v", expectedOut, actualOut)
	}

}

//ilightthings::light.local:aaaaaaaaaaaaaaaa:8d27c753d9b37df328ce0de32d333ecb:010100000000000080ce5e54ca4ed90171386c7a7133553200000000010010004b006500570073007800690052006400030010004b006500570073007800690052006400020010007a006b00620066007700790051005200040010007a006b006200660077007900510052000700080080ce5e54ca4ed90109001a0063006900660073002f004b0065005700730078006900520064000000000000000000

func TestGenNTOWFv2(t *testing.T) {
	user := "ilightthings"
	domain := "light.local"
	password := "password"
	var hash []byte

	expectedOut := []byte{0x8d, 0x19, 0x78, 0x8c, 0x29, 0xc5, 0x77, 0x78, 0x5d, 0xa0, 0x34, 0xc0, 0xa9, 0x19, 0xb8, 0x82}
	actualOut, err := GenNTOWFv2(user, domain, password, hash)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(expectedOut, actualOut) {
		t.Errorf("unexpected result.\nShould be:\n%+v\nActually\n%+v", expectedOut, actualOut)
	}
}

func TestParseNTLMSSP_Challenge(t *testing.T) {
	testcase := []byte{0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x38, 0x00, 0x00, 0x00, 0x05, 0x02, 0x8a, 0xa2, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x48, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x01, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x03, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x02, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x04, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x07, 0x00, 0x08, 0x00, 0x80, 0x82, 0x2a, 0x83, 0x66, 0x4f, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00}

	obj, err := ParseNTLMSSP_Challenge(testcase)
	if err != nil {
		t.Fatal(err)
	}

	//pugIljTs
	expectedTargetNameBytes := []byte{0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00}
	//targetNameDecoded := "pugIljTs"

	if !bytes.Equal(expectedTargetNameBytes, obj.TargetName) {
		t.Errorf("unexpected result.\nShould be:\n%+v\nActually\n%+v", expectedTargetNameBytes, obj.TargetName)
	}

	expectedFlagBytes := []byte{0x05, 0x02, 0x8a, 0xa2}
	if !bytes.Equal(expectedFlagBytes, obj.NegotiateFlags) {
		t.Errorf("unexpected flags  result.\nShould be:\n%+v\nActually\n%+v", expectedFlagBytes, obj.NegotiateFlags)

	}

	expectedServerChallenge := []byte{0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa}
	if !bytes.Equal(expectedServerChallenge, obj.ServerChallenge) {
		t.Errorf("unexpected result for server challenge.\nShould be:\n%+v\nActually\n%+v", expectedFlagBytes, obj.NegotiateFlags)

	}

	expectedTargetInfo := []byte{0x01, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x03, 0x00, 0x10, 0x00, 0x41, 0x00, 0x57, 0x00, 0x69, 0x00, 0x46, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x7a, 0x00, 0x02, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x04, 0x00, 0x10, 0x00, 0x70, 0x00, 0x75, 0x00, 0x67, 0x00, 0x49, 0x00, 0x6c, 0x00, 0x6a, 0x00, 0x54, 0x00, 0x73, 0x00, 0x07, 0x00, 0x08, 0x00, 0x80, 0x82, 0x2a, 0x83, 0x66, 0x4f, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00}

	if !bytes.Equal(expectedTargetInfo, obj.TargetInfo) {
		t.Errorf("unexpected result for target info.\nShould be:\n%+v\nActually\n%+v", expectedTargetInfo, obj.TargetInfo)
	}

	expectedVersionCode := []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
	if !bytes.Equal(expectedVersionCode, obj.Version) {
		t.Errorf("unexpected result for version info. Should be:\n%+v\nActually\n%+v", expectedVersionCode, obj.Version)
	}

	obj.Readable()

}

// Test PCAP file from https://wiki.wireshark.org/SMB2
func TestParseNTLMSSP_Auth(t *testing.T) {
	testcase := []byte{0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x01, 0x48, 0x01, 0xca, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x58, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x76, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x94, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x12, 0x02, 0x00, 0x00, 0x15, 0x82, 0x88, 0xe2, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00, 0x0f, 0x18, 0x49, 0xf5, 0xf1, 0xc0, 0xe0, 0x23, 0x60, 0x1d, 0x2f, 0xc2, 0x16, 0x22, 0xe4, 0x3f, 0xec, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x41, 0x00, 0x45, 0x00, 0x46, 0x00, 0x4d, 0x00, 0x37, 0x00, 0x47, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6b, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x41, 0x00, 0x45, 0x00, 0x46, 0x00, 0x4d, 0x00, 0x37, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x49, 0xb0, 0xb2, 0xa7, 0x3a, 0x19, 0x11, 0x41, 0xbd, 0xa0, 0x7d, 0x1e, 0xd1, 0x84, 0x34, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01, 0x14, 0x6f, 0x94, 0x34, 0x77, 0x75, 0x32, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01, 0x06, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xad, 0x86, 0x5b, 0x6d, 0x08, 0xa9, 0x5d, 0x0e, 0x76, 0xa9, 0x4e, 0x2c, 0xa0, 0x13, 0xab, 0x3f, 0x69, 0xc4, 0xfd, 0x94, 0x5c, 0xca, 0x01, 0xb2, 0x77, 0x70, 0x0f, 0xd2, 0xb3, 0x05, 0xca, 0x01, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x28, 0x00, 0x63, 0x00, 0x69, 0x00, 0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x31, 0x00, 0x39, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x36, 0x00, 0x38, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x39, 0x00, 0x39, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x33, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x6d, 0x0d, 0x78, 0xdf, 0x40, 0x14, 0xcc, 0xbf, 0x0d, 0x2e, 0x7f, 0xd3, 0x4f, 0x25, 0xf6}

	obj, err := ParseNTLMSSP_Auth(testcase)
	if err != nil {
		t.Fatal(err)
	}

	lmResponceExpected := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	if !bytes.Equal(lmResponceExpected, obj.LmChallengeResponse) {
		t.Errorf("lmResponce is not correct.\nExpect: %#v\nGot: %#v", lmResponceExpected, obj.LmChallengeResponse)
	}

	NTResponceExpected := []byte{0x81, 0x49, 0xb0, 0xb2, 0xa7, 0x3a, 0x19, 0x11, 0x41, 0xbd, 0xa0, 0x7d, 0x1e, 0xd1, 0x84, 0x34, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01, 0x14, 0x6f, 0x94, 0x34, 0x77, 0x75, 0x32, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01, 0x06, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xad, 0x86, 0x5b, 0x6d, 0x08, 0xa9, 0x5d, 0x0e, 0x76, 0xa9, 0x4e, 0x2c, 0xa0, 0x13, 0xab, 0x3f, 0x69, 0xc4, 0xfd, 0x94, 0x5c, 0xca, 0x01, 0xb2, 0x77, 0x70, 0x0f, 0xd2, 0xb3, 0x05, 0xca, 0x01, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x28, 0x00, 0x63, 0x00, 0x69, 0x00, 0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x31, 0x00, 0x39, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x36, 0x00, 0x38, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x39, 0x00, 0x39, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x33, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	if !bytes.Equal(NTResponceExpected, obj.NtChallengeResponse) {
		t.Errorf("NTResponceExpected is not correct.\nExpect: %#v\nGot: %#v", NTResponceExpected, obj.NtChallengeResponse)
	}

	expectedDomain := []byte{0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x41, 0x00, 0x45, 0x00, 0x46, 0x00, 0x4d, 0x00, 0x37, 0x00, 0x47, 0x00}

	if !bytes.Equal(expectedDomain, obj.DomainName) {
		t.Errorf("expectedDomain is not correct.\nExpect: %#v\nGot: %#v", expectedDomain, obj.DomainName)
	}

	expectedUserName := []byte{0x57, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6b, 0x00}

	testEqual("username", expectedUserName, obj.UserName, t)

	expectedHostName := []byte{0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x41, 0x00, 0x45, 0x00, 0x46, 0x00, 0x4d, 0x00, 0x37, 0x00, 0x47, 0x00}

	testEqual("Hostname", expectedHostName, obj.Workstation, t)

	expectedSessionKey := []byte{0xf2, 0x6d, 0x0d, 0x78, 0xdf, 0x40, 0x14, 0xcc, 0xbf, 0x0d, 0x2e, 0x7f, 0xd3, 0x4f, 0x25, 0xf6}

	testEqual("sessionkey", expectedSessionKey, obj.EncryptedRandomSessionKey, t)

	expectedFlags := []byte{0x15, 0x82, 0x88, 0xe2}

	testEqual("flags", expectedFlags, obj.NegotiateFlags, t)

	expectedVersion := []byte{0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00, 0x0f}

	testEqual("version", expectedVersion, obj.Version, t)

	expectedMIC := []byte{0x18, 0x49, 0xf5, 0xf1, 0xc0, 0xe0, 0x23, 0x60, 0x1d, 0x2f, 0xc2, 0x16, 0x22, 0xe4, 0x3f, 0xec}

	testEqual("MIC", expectedMIC, obj.MIC, t)

	obj.Readable()

}

func Test_getHumanNegoTargetInfo(t *testing.T) {
	testcase := []byte{0x02, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01, 0x00, 0x00, 0x00, 0x00}
	obj, err := getAVIDObj(testcase)
	if err != nil {
		t.Fatal(err)
	}

	expectedNBdomainname := []byte{0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00}
	testEqual("NetBiosDomainName", expectedNBdomainname, obj.MsvAvDnsDomainName, t)

	expectedNBcomputername := []byte{0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00}
	testEqual("NetBiosComputername", expectedNBcomputername, obj.MsvAvDnsComputerName, t)

	expectedDNSDomain := []byte{0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00}
	testEqual("DNS Domain", expectedDNSDomain, obj.MsvAvDnsDomainName, t)

	expectedDNSComputerName := []byte{0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00}
	testEqual("DNS computer name", expectedDNSComputerName, obj.MsvAvDnsComputerName, t)

	expectedTimeStamp := []byte{0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01}
	testEqual("Timestamp", expectedTimeStamp, obj.MsvAvTimestamp, t)

	obj.Readable()

}

func testEqual(name string, expect []byte, actul []byte, t *testing.T) {
	if !bytes.Equal(expect, actul) {
		t.Errorf("%s not as expect.\nExpected:\n%#v\nGot:\n%#v", name, expect, actul)
	}
}

func TestPrintNTLMSSPStruc(t *testing.T) {
	testcase := []byte{0x02, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85, 0x27, 0xd2, 0x01, 0x00, 0x00, 0x00, 0x00}
	obj, err := getAVIDObj(testcase)
	if err != nil {
		t.Fatal(err)
	}

	PrintNTLMSSPStruc(obj)

}
